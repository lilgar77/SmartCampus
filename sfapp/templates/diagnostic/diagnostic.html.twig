{% extends 'base.html.twig' %}

{% block title %}Outil de diagnostic{% endblock %}

{% block head %}
{% endblock %}

{% block body %}

<!-- Contenu principal centré -->
<div class="d-flex justify-content-center align-items-center vh-60 flex-column">
    <h1>Diagnostic</h1>
</div>


{% if dataTemp.error is defined or dataHum.error is defined or dataCo2.error is defined %}
    <p>Erreur : {{ dataTemp.error ?? dataHum.error ?? dataCo2.error }}</p>
{% else %}


{% endif %}


<div class="container mt-4">
    <div class="card shadow-sm p-4">
        <h1 class="h3 mb-4 text-center background-container"> {{ as.Name }}</h1>

        <div class="row">
            <div class="col-md-4 mb-3">
                <div class="accordion" id="accordionPanelsStayOpenExampleOne">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="false" aria-controls="panelsStayOpen-collapseOne">
                                GRAPHIQUE CO2
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse">
                            <div class="accordion-body">
                                <div>
                                    <canvas id="co2Chart" style="width: 100%; height: 350px;"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-3">
                <div class="accordion" id="accordionPanelsStayOpenExampleTwo">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
                                GRAPHIQUE HUMIDITE
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse">
                            <div class="accordion-body">
                                <canvas id="humChart" style="width: 100%; height: 350px;"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-3">
                <div class="accordion" id="accordionPanelsStayOpenExampleThree">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseThree" aria-expanded="false" aria-controls="panelsStayOpen-collapseThree">
                                GRAPHIQUE TEMPERATURE
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseThree" class="accordion-collapse collapse">
                            <div class="accordion-body">
                                <canvas id="tempChart" style="width: 100%; height: 350px;"></canvas>                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-3">
                <div class="accordion" id="accordionPanelsStayOpenExampleFour">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseFour" aria-expanded="false" aria-controls="panelsStayOpen-collapseFour">
                                Rappel des 5 dernières alertes
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseFour" class="accordion-collapse collapse">
                            <div class="accordion-body">
                                refsdgdgsreqfgyhtdresxcgtdrgxcgtrgfdxrtgf
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="accordion" id="accordionPanelsStayOpenExampleFive">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseFive" aria-expanded="false" aria-controls="panelsStayOpen-collapseFive">
                                Analyse
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseFive" class="accordion-collapse collapse">
                            <div class="accordion-body">
                                zsedrftghsqdfghjkdsfgh
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>



        <script>
            // Données pour les graphiques
            const labels = [];
            {% for item in dataTemp %}
            labels.push('{{ item.dateCapture }}');
            {% endfor %}

            const tempData = [];
            {% for item in dataTemp %}
            tempData.push({{ item.valeur }});
            {% endfor %}

            const humData = [];
            {% for item in dataHum %}
            humData.push({{ item.valeur }});
            {% endfor %}

            const co2Data = [];
            {% for item in dataCo2 %}
            co2Data.push({{ item.valeur }});
            {% endfor %}

            // Données pour les graphiques
            let redThresholdCo2 = 0;
            let yellowThresholdCo2 = 0;
            let greenThresholdCo2 = 0;

            for (let i = 0; i < co2Data.length; i++) {
                 if(co2Data[i] >= 400 && co2Data[i] < 1000)
                 {
                     greenThresholdCo2++;
                 }
                 else if(co2Data[i] >= 1000 && co2Data[i] < 1400)
                 {
                     yellowThresholdCo2++;
                 }
                 else if(co2Data[i] >= 1400)
                 {
                     redThresholdCo2++;
                 }
                 else{
                     redThresholdCo2++;
                 }
            }


            // Données pour les graphiques
            let darkBlueThresholdTemp = 0;
            let lightBlueThresholdTemp = 0;
            let redThresholdTemp = 0;
            let yellowThresholdTemp = 0;
            let orangeThresholdTemp = 0;
            let greenThresholdTemp = 0;

            for (let i = 0; i < tempData.length; i++) {
                if(tempData[i] < 10.0)
                {
                    darkBlueThresholdTemp++;
                }
                else if(tempData[i] >= 10.0 && tempData[i] < 17.0)
                {
                    lightBlueThresholdTemp++;
                }
                else if(tempData[i] >= 17.0 && tempData[i] <= 21.0)
                {
                    greenThresholdTemp++;
                }
                else if(tempData[i] > 21.0 && tempData[i] < 25.0){
                    yellowThresholdTemp++;
                }
                else if(tempData[i] >= 25.0 && tempData[i] < 35.0){
                    orangeThresholdTemp++;
                }
                else if(tempData[i] >= 35.0 ){
                    redThresholdTemp++;
                }
            }

            // Données pour les graphiques
            let redThresholdHum = 0;
            let yellowThresholdHum = 0;
            let greenThresholdHum = 0;

            for (let i = 0; i < humData.length; i++) {
                if(humData[i] >= 70.0 && tempData[i] >= 25)
                {
                    redThresholdHum++;
                }
                else if(humData[i] >= 70.0 && (tempData[i] >= 20 && tempData[i] <25))
                {
                    yellowThresholdCo2++;
                }
                else{
                    greenThresholdHum++;
                }
            }






            // Créer le graphique CO2
            const co2ChartCtx = document.getElementById('co2Chart').getContext('2d');

            const co2Chart = new Chart(co2ChartCtx, {
                type: 'pie',  // ou 'bar'
                data: {
                    labels: ['Taux de CO2 entre 400 et 1000 ppm', 'Taux de CO2 entre 1000 et 1400 ppm', 'Taux de CO2 au dessus de 1400 ppm'],
                    datasets: [{
                        data: [greenThresholdCo2, yellowThresholdCo2, redThresholdCo2],
                        backgroundColor: [
                            'rgb(41,112,6)',  // vert
                            'rgb(184,177,2)',  // jaune
                            'rgb(255,0,55)',   // rouge
                        ],
                        hoverOffset: 1
                    }]
                },
                options: {
                    responsive: true, // Le graphique s'adapte à la taille de l'écran
                    plugins: {
                        legend: {
                            position: 'top', // Position de la légende (top, bottom, left, right)
                        },
                        tooltip: {
                            enabled: false, // Active les infobulles
                        },
                    }
                }
            });

            // Créer les graphiques
            const tempChartCtx = document.getElementById('tempChart').getContext('2d');
            const humChartCtx = document.getElementById('humChart').getContext('2d');

            const tempChart = new Chart(tempChartCtx, {
                type: 'pie',  // ou 'bar'
                data: {
                    labels: ['Température inférieure à 10°C', 'Température entre 10 et 17°C', 'Température entre 17 et 21°C', 'Température entre 21 et 25°C','Température entre 25 et 35°C', 'Température supérieure à 35°C'],
                    datasets: [{
                        data: [darkBlueThresholdTemp, lightBlueThresholdTemp, greenThresholdTemp, yellowThresholdTemp, orangeThresholdTemp, redThresholdTemp],
                        backgroundColor: [
                            'rgb(6,20,112)',  // vert
                            'rgb(8,138,209)',  // jaune
                            'rgb(41,112,6)',
                            'rgb(184,177,2)',  // jaune
                            'rgb(209,92,8)',  // jaune
                            'rgb(255,0,55)',   // rouge
                        ],
                        hoverOffset: 1
                    }]
                },
                options: {
                    responsive: true, // Le graphique s'adapte à la taille de l'écran
                    plugins: {
                        legend: {
                            position: 'top', // Position de la légende (top, bottom, left, right)
                        },
                        tooltip: {
                            enabled: false, // Active les infobulles
                        },
                    }
                }
            });

            const humChart = new Chart(humChartCtx, {
                type: 'pie',  // ou 'bar'
                data: {
                    labels: ['Gros risques de moisissure', 'Risques de moisissure', 'Très peu de risques de moisissure'],
                    datasets: [{
                        data: [redThresholdHum, yellowThresholdHum, greenThresholdHum],
                        backgroundColor: [
                            'rgb(255,0,55)',
                            'rgb(184,177,2)',
                            'rgb(41,112,6)',
                        ],
                    }]
                },
                options: {
                    responsive: true, // Le graphique s'adapte à la taille de l'écran
                    plugins: {
                        legend: {
                            position: 'top', // Position de la légende (top, bottom, left, right)
                        },
                        tooltip: {
                            enabled: false, // Active les infobulles
                        },
                    }
                }
            });

        </script>

    </div>
    {% endblock %}