{% extends 'base.html.twig' %}

{% block title %}Welcome to Smart Campus{% endblock %}

{% block head %}
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
{% endblock %}

{% block body %}

    <!-- Contenu principal centré -->
    <div class="d-flex justify-content-center align-items-center vh-60 flex-column">
        <h1>Détails de la salle {{ room.name }}</h1>


        <div class="progress-circle-container">
            <svg class="progress-circle" viewBox="0 0 200 200">
                <!-- Cercle de bordure -->
                <circle cx="100" cy="100" r="90" class="circle-bg" />

                <!-- Vague animée -->
                <mask id="wave-mask">
                    <rect x="0" y="0" width="200" height="200" fill="white" />
                    <path class="wave" d="M 0 150 Q 50 140, 100 150 T 200 150 V 200 H 0 Z" fill="black" />
                </mask>

                <!-- Cercle avec vague -->
                <circle cx="100" cy="100" r="90" class="circle-wave" mask="url(#wave-mask)" />
            </svg>
        </div>

        <div class="sun" id="sun">
            <div class="sun-text" id="temp-text">{{ room.idAS.temperature }}°C</div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const humidity = parseFloat('{{ room.idAS.humidity }}'); // Récupérer l'humidité
                const wave = document.querySelector('.wave');

                if (!isNaN(humidity)) {
                    // Calcul de la hauteur de la vague en fonction de l'humidité
                    // Humidité entre 8% (presque bas du cercle) et 90% (près du sommet)

                    let height;

                    // Condition selon l'humidité
                    if (humidity <= 10) {
                        // Si l'humidité est très faible (jusqu'à 10%), la vague sera presque en bas
                        height = humidity * 3.5; // Très bas
                    } else if (humidity > 10 && humidity <= 30) {
                        // Humidité entre 10 et 30%, la vague monte légèrement
                        height = humidity * 2.7; // Un peu plus haut
                    } else if (humidity > 30 && humidity < 50) {
                        // Humidité entre 30 et 50%, la vague est plus haute
                        height = humidity * 2.2; // Plus haute
                    } else {
                        // Si l'humidité est supérieure à 90%, la vague est au sommet
                        height = humidity * 2; // Presque au sommet
                    }


                     // 1.5 pour que l'humidité 90% donne presque 10

                    // Limiter la hauteur à ne pas dépasser la base (200) et à ne pas être trop basse
                    height = Math.min(200, height);

                    // Appliquer la nouvelle hauteur à la vague
                    wave.setAttribute('d', `M 0 ${height} Q 50 ${height - 10}, 100 ${height} T 200 ${height} V 200 H 0 Z`);
                }
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const sun = document.getElementById('sun');
                const tempText = document.getElementById('temp-text');
                const temperature = parseFloat('{{ room.idAS.temperature }}'); // Température de la salle

                if (!isNaN(temperature)) {
                    let startColor = 'rgb(0, 0, 255)'; // Bleu foncé pour -5°C
                    let endColor = 'rgb(255, 0, 0)'; // Rouge foncé pour 40°C

                    // Calculer la couleur du dégradé en fonction de la température
                    let tempRatio = (temperature + 5) / 45; // Température normalisée de -5°C à 40°C
                    tempRatio = Math.min(Math.max(tempRatio, 0), 1); // Limiter la valeur entre 0 et 1

                    // Calculer les nouvelles couleurs en fonction de la température
                    let r = Math.round((255 - 0) * tempRatio + 0);  // Calcul du rouge
                    let g = 0;  // Pas de vert dans ce dégradé
                    let b = Math.round((0 - 255) * (1 - tempRatio) + 255);  // Calcul du bleu

                    // Créer la couleur du dégradé
                    const gradient = `radial-gradient(circle, rgb(${b}, ${g}, ${r}) 0%, rgb(255, 0, 0) 100%)`;

                    // Appliquer la couleur du dégradé au cercle
                    sun.style.background = gradient;

                    // Afficher la température au centre du cercle
                    tempText.textContent = `${temperature}°C`;
                }
            });
        </script>
        <h3>Température : {{ room.idAS.temperature }} °C</h3>
        <h3>Humidité : {{ room.idAS.humidity }}%</h3>
        <h3>CO2 : {{ room.idAS.CO2 }} ppm</h3>


    </div>




    <!-- Scripts JavaScript de Bootstrap -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
{% endblock %}