{% extends 'base.html.twig' %}

{% block title %}Welcome to Smart Campus{% endblock %}

{% block head %}
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
{% endblock %}

{% block body %}

    <!-- Contenu principal centré -->
    <div class="d-flex justify-content-center align-items-center vh-60 flex-column">
        <h1>Détails de la salle {{ room.name }}</h1>


    <div class="d-flex justify-content-around circles-wrapper">
        <div class="circle-item">
            <div class="progress-circle-container">
                <div class="progress-circle">
                    <div class="circle-info-wave">{{ room.idAS.humidity }}%</div>
                    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
                        <path id="wave-path" d="" fill="#81c7f5"></path>
                    </svg>

                </div>

            </div>

        </div>

        <div class="circle-item">
            <div class="thermometer-container">
                <div class="thermometer">
                    <div class="thermometer-level"></div>
                </div>
                <div class="thermometer-bulb"> <p class="circle-info-temp"> {{ room.idAS.temperature }}°C</p></div>

            </div>
        </div>

        <div class="circle-item">
            <div class="cloud-container">
                <img id="cloud" src="{{ asset('images/Nuage.png') }}" alt="Nuage Vert">
            </div>
            <p class="circle-info-cloud">CO2 : {{ room.idAS.CO2 }} ppm</p>
        </div>

    </div>


        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const humidity = parseFloat('{{ room.idAS.humidity }}'); // Récupérer l'humidité
                const wavePath = document.getElementById('wave-path');
                const colorText = document.querySelector('.circle-info-wave');
                const temp = parseFloat('{{ room.idAS.temperature }}');

                function updateTextColor() {

                    if(humidity >= 70)
                    {
                        if(temp < 20)
                        {
                            colorText.style.color = 'green';
                        }
                        else if(temp >= 20 && temp <= 25)
                        {
                            colorText.style.color = '#edc11d';
                        }
                        else
                        {
                            colorText.style.color = 'red';

                        }
                    }
                    else{
                        colorText.style.color = 'green';
                    }
                }

                // Met à jour la couleur dès le chargement
                updateTextColor();

                if (!isNaN(humidity)) {
                    // Calcul de la hauteur en fonction de l'humidité (max hauteur : 200)
                    const height = Math.min(200, Math.max(0, (1 - humidity / 100) * 200));



                    // Générer un chemin SVG avec une oscillation pour un effet naturel
                    function generateWavePath(offset) {
                        const waveHeight = height;
                        return `
                M0 ${waveHeight + Math.sin(offset) * 10}
                Q50 ${waveHeight - 10 + Math.cos(offset) * 10}, 100 ${waveHeight + Math.sin(offset) * 10}
                T200 ${waveHeight + Math.cos(offset) * 10}
                V200 H0 Z
            `;
                    }

                    // Animation de la vague
                    let offset = 0;
                    function animateWave() {
                        offset += 0.1; // Ajuster la vitesse de l'oscillation
                        wavePath.setAttribute('d', generateWavePath(offset));
                        requestAnimationFrame(animateWave);
                    }

                    // Initialiser la vague
                    wavePath.setAttribute('d', generateWavePath(0));
                    animateWave();
                }
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const temp = parseFloat('{{ room.idAS.temperature }}'); // Récupérer la température
                const thermometerLevel = document.querySelector('.thermometer-level'); // Niveau de la jauge

                if (!isNaN(temp)) {
                    // Calculer la hauteur du niveau (150px = max, température max : 40°C)
                    const maxTemp = 40; // Température maximale attendue
                    const minTemp = -10; // Température minimale attendue
                    const clampedTemp = Math.max(minTemp, Math.min(maxTemp, temp));
                    let height
                    if(clampedTemp >= 35){
                        height = ((clampedTemp + minTemp) / (maxTemp + minTemp)) * 320;
                    }
                    else if(clampedTemp < 35 && clampedTemp >= 30)
                    {
                        height = ((clampedTemp + minTemp) / (maxTemp + minTemp)) * 330;
                    }
                    else if(clampedTemp < 30 && clampedTemp >= 25)
                    {
                        height = ((clampedTemp + minTemp) / (maxTemp + minTemp)) * 360;
                    }
                    else if(clampedTemp < 25 && clampedTemp >= 20)
                    {
                        height = ((clampedTemp + minTemp) / (maxTemp + minTemp)) * 420;
                    }
                    else if(clampedTemp < 20)
                    {
                        height = ((clampedTemp - minTemp) / (maxTemp + minTemp)) * 150;
                    }// Limiter entre min et max
                     // Échelle entre -10 et 40°C
                    thermometerLevel.style.height = `${height}px`;

                    // Définir la couleur du niveau selon la température
                    if (temp < 0) {
                        thermometerLevel.style.background = 'blue';
                    } else if (temp >= 0 && temp <= 15) {
                        thermometerLevel.style.background = '#edc11d'; // Jaune
                    } else if (temp > 15 && temp <= 25) {
                        thermometerLevel.style.background = 'orange';
                    } else if (temp > 25 && temp <= 30) {
                        thermometerLevel.style.background = 'orangered';
                    } else if (temp > 30) {
                        thermometerLevel.style.background = 'red';
                    }
                }
            });

            // Gestion du CO₂ (taille du nuage)
            const co2 = parseFloat('{{ room.idAS.CO2 }}');
            const cloud = document.getElementById('cloud');
            if (!isNaN(co2)) {
                const scale = Math.min(Math.max(co2 / 1400, 0.28), 0.8); // Échelle entre 0.5 et 1.5
                cloud.style.transform = `scale(${scale})`;
            }

            document.addEventListener('DOMContentLoaded', () => {
                const cloudImage = document.getElementById('cloud');

                // Ajout d'une classe pour l'état initial
                cloudImage.classList.add('initial-state');

                // Attendre que la page soit complètement chargée
                setTimeout(() => {
                    // Supprimer la classe initiale pour déclencher l'animation
                    cloudImage.classList.remove('initial-state');
                    // Laisser l'animation CSS ajuster la taille
                }, 50); // Légère pause pour garantir la préparation du DOM
            });
        </script>


    </div>




    <!-- Scripts JavaScript de Bootstrap -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
{% endblock %}