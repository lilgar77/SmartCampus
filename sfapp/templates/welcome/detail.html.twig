{% extends 'base.html.twig' %}

{% block title %}Welcome to Smart Campus{% endblock %}


{% block body %}

    <!-- Contenu principal centré -->
    <div class="d-flex justify-content-center align-items-center vh-60 flex-column">
        <div class="d-flex align-items-center mb-4">
            <a href="{{ path('app_welcome') }}" class="btn btn-violet text-white">
                &#8592; Retour
            </a>
            <h1>Détails de la salle {{ room.name }} ({{ lastCapturehum.dateCapture }})</h1>
        </div>

        <div class="d-flex justify-content-around circles-wrapper">
            <div class="circle-container">
                <div class="circle-item">
                    <div class="progress-circle-container">
                        <div class="progress-circle">
                            <div class="circle-info-wave">
                                {{ lastCapturehum.valeur}}%
                            </div>
                            <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
                                <path id="wave-path" d="" fill="#56CCCA"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="legend">
                        <div class="legend-item">
                            <span class="legend-color green"></span>
                            <span> <70% ou sinon la température est inférieur à 20°C</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color yellow"></span>
                            <span> >70% et la température est entre 20 et 25°C</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color red"></span>
                            <span> >70% et la température est supérieur à 25°C</span>
                        </div>
                    </div>
                </div>

                <div class="circle-item">
                    <div class="thermometer-container">
                        <div class="thermometer">
                            <div class="thermometer-level"></div>
                        </div>
                        <div class="thermometer-bulb">
                            <p class="circle-info-temp">
                                {{ lastCapturetemp.valeur ?? 0 }}°C
                            </p>
                        </div>
                    </div>
                    <div class="legend-thermometer">
                        <div class="legend-item">
                            <span class="legend-color green"></span>
                            <span>Entre 17 et 21°C</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color yellow"></span>
                            <span>Entre 22 et 26°C ou entre 16 et 12°C</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color red"></span>
                            <span>Moins de 12°C ou plus de 26°C</span>
                        </div>
                    </div>
                </div>

                <div class="circle-item">
                    <div class="co2-container">
                        <svg viewBox="0 0 200 100" class="co2-svg">
                            <defs>
                                <!-- Gradient dynamique -->
                                <linearGradient id="co2-gradient" x1="0%" y1="0%" x2="0%" y2="100%">
                                    <stop offset="0%" style="stop-color: #ffffff; stop-opacity: 1" />
                                    <stop offset="100%" style="stop-color: #93CC56; stop-opacity: 1" />
                                </linearGradient>
                            </defs>
                            <!-- Texte avec contour noir -->
                            <text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle"
                                  fill="url(#co2-gradient)" stroke="black" stroke-width="2"
                                  font-size="70" font-family="Arial, sans-serif" class="co2-text">
                                CO2
                            </text>
                        </svg>
                    </div>
                    <p class="circle-info-cloud">
                        {{ lastCaptureco2.valeur ?? 0 }} ppm
                    </p>
                    <div class="legend">
                        <div class="legend-item">
                            <span class="legend-color green"></span>
                            <span>Entre 400 et 1000 ppm</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color yellow"></span>
                            <span>Entre 1000 et 1400 ppm</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color red"></span>
                            <span>Moins de 400 ppm ou plus de 1400 ppm </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    {% if dataTemp.error is defined or dataHum.error is defined or dataCo2.error is defined %}
        <p>Erreur : {{ dataTemp.error ?? dataHum.error ?? dataCo2.error }}</p>
    {% else %}
        <h1 class="text-center mb-4">Résultats de la journée:</h1>

    </div>
        <div class="d-flex justify-content-center mb-4">
            <div style="width: 30%; text-align: center; margin-right: 5%;">
                <h5>Température (°C)</h5>
                <canvas id="tempChart" style="width: 100%; height: 350px;"></canvas>
            </div>

            <div style="width: 30%; text-align: center;">
                <h5>Humidité (%)</h5>
                <canvas id="humChart" style="width: 100%; height: 350px;"></canvas>
            </div>
        </div>

        <div class="d-flex justify-content-center mb-4">
            <div style="width: 30%; text-align: center;">
                <h5>CO2 (ppm)</h5>
                <canvas id="co2Chart" style="width: 100%; height: 350px;"></canvas>
            </div>
        </div>

    {% endif %}


    <script>
        window.roomCO2 = {{ lastCaptureco2.valeur }};
        window.roomTemp = {{ lastCapturetemp.valeur }};
        window.roomHumidity = {{ lastCapturehum.valeur }};

    </script>






    <script>
        // Données pour les graphiques
        const labels = [];
        {% for item in dataTemp %}
        labels.push('{{ item.dateCapture }}');
        {% endfor %}

        const tempData = [];
        {% for item in dataTemp %}
        tempData.push({{ item.valeur }});
        {% endfor %}

        const humData = [];
        {% for item in dataHum %}
        humData.push({{ item.valeur }});
        {% endfor %}

        const co2Data = [];
        {% for item in dataCo2 %}
        co2Data.push({{ item.valeur }});
        {% endfor %}

        // Créer les graphiques
        const tempChartCtx = document.getElementById('tempChart').getContext('2d');
        const humChartCtx = document.getElementById('humChart').getContext('2d');
        const co2ChartCtx = document.getElementById('co2Chart').getContext('2d');

        const tempChart = new Chart(tempChartCtx, {
            type: 'line',  // ou 'bar'
            data: {
                labels: labels,
                datasets: [{
                    label: 'Température (°C)',
                    data: tempData,
                    borderColor: 'rgb(255, 99, 132)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        const humChart = new Chart(humChartCtx, {
            type: 'line',  // ou 'bar'
            data: {
                labels: labels,
                datasets: [{
                    label: 'Humidité (%)',
                    data: humData,
                    borderColor: 'rgb(54, 162, 235)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        const co2Chart = new Chart(co2ChartCtx, {
            type: 'line',  // ou 'bar'
            data: {
                labels: labels,
                datasets: [{
                    label: 'CO2 (ppm)',
                    data: co2Data,
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });
    </script>

{% endblock %}