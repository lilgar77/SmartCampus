{% extends 'base.html.twig' %}

{% block title %}Welcome to Smart Campus{% endblock %}

{% block head %}
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
{% endblock %}

{% block body %}

    <!-- Contenu principal centré -->
    <div class="d-flex justify-content-center align-items-center vh-60 flex-column">
        <h1>Détails de la salle {{ room.name }}</h1>


        <!-- Conteneur pour aligner les cercles -->
        <div class="circles-container">
            <!-- Premier cercle : Humidité -->
            <div class="progress-circle-container">
                <svg class="progress-circle" viewBox="0 0 200 200">
                    <!-- Cercle de bordure -->
                    <circle cx="100" cy="100" r="90" class="circle-bg" />

                    <!-- Vague animée -->
                    <mask id="wave-mask">
                        <rect x="0" y="0" width="200" height="200" fill="white" />
                        <path class="wave" d="M 0 150 Q 50 140, 100 150 T 200 150 V 200 H 0 Z" fill="black" />
                    </mask>

                    <!-- Cercle avec vague -->
                    <circle cx="100" cy="100" r="90" class="circle-wave" mask="url(#wave-mask)" />
                </svg>
            </div>

            <!-- Deuxième cercle : Température -->
            <div class="sun" id="sun">
                <div class="sun-text" id="temp-text">{{ room.idAS.temperature }}°C</div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const humidity = parseFloat('{{ room.idAS.humidity }}'); // Récupérer l'humidité
                const wave = document.querySelector('.wave');

                if (!isNaN(humidity)) {
                    // Calcul de la hauteur de la vague en fonction de l'humidité
                    // Humidité entre 8% (presque bas du cercle) et 90% (près du sommet)

                    let height;

                    // Condition selon l'humidité
                    if (humidity <= 10) {
                        // Si l'humidité est très faible (jusqu'à 10%), la vague sera presque en bas
                        height = humidity * 3.5; // Très bas
                    } else if (humidity > 10 && humidity <= 30) {
                        // Humidité entre 10 et 30%, la vague monte légèrement
                        height = humidity * 2.7; // Un peu plus haut
                    } else if (humidity > 30 && humidity < 50) {
                        // Humidité entre 30 et 50%, la vague est plus haute
                        height = humidity * 2.2; // Plus haute
                    } else {
                        // Si l'humidité est supérieure à 90%, la vague est au sommet
                        height = humidity * 2; // Presque au sommet
                    }


                     // 1.5 pour que l'humidité 90% donne presque 10

                    // Limiter la hauteur à ne pas dépasser la base (200) et à ne pas être trop basse
                    height = Math.min(200, height);

                    // Appliquer la nouvelle hauteur à la vague
                    wave.setAttribute('d', `M 0 ${height} Q 50 ${height - 10}, 100 ${height} T 200 ${height} V 200 H 0 Z`);
                }
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const sun = document.getElementById('sun');
                const tempText = document.getElementById('temp-text');
                const temperature = parseFloat('{{ room.idAS.temperature }}'); // Température de la salle

                if (!isNaN(temperature)) {


                    switch (true) {
                        case (temperature < 0):
                            sun.style.background = "darkblue";
                            break;
                        case (temperature >= 0 && temperature <= 5):
                            sun.style.background = "blue";
                            break;
                        case (temperature > 5 && temperature <= 15):
                            sun.style.background = "yellow";
                            break;
                        case (temperature > 15 && temperature <= 25):
                            sun.style.background = "orange";
                            break;
                        case (temperature > 25 && temperature <= 30):
                            sun.style.background = "orangered";
                            break;
                        case (temperature > 30):
                            sun.style.background = "red";
                            break;
                        default:
                            console.log("Température invalide.");
                            break;
                    }



                    // Afficher la température au centre
                    tempText.textContent = `${temperature}°C`;
                }
            });
        </script>
        <h3>Température : {{ room.idAS.temperature }} °C</h3>
        <h3>Humidité : {{ room.idAS.humidity }}%</h3>
        <h3>CO2 : {{ room.idAS.CO2 }} ppm</h3>


    </div>




    <!-- Scripts JavaScript de Bootstrap -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
{% endblock %}