{% extends 'base.html.twig' %}

{% block title %}Welcome to Smart Campus{% endblock %}

{% block head %}
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
{% endblock %}

{% block body %}

    <!-- Contenu principal centré -->
    <div class="d-flex justify-content-center align-items-center vh-60 flex-column">
        <h1>Détails de la salle {{ room.name }}</h1>


        <!-- Conteneur pour aligner les cercles -->
        <div class="circles-container">
            <!-- Premier cercle : Humidité -->

            <div class="progress-circle-container">
                <svg class="progress-circle" viewBox="0 0 200 200">
                    <!-- Cercle de bordure -->
                    <circle cx="100" cy="100" r="90" class="circle-bg" />

                    <!-- Masque pour la vague -->
                    <mask id="wave-mask">
                        <rect x="0" y="0" width="800" height="200" fill="white" />
                        <path
                                class="wave"
                                d="
                    M 0 300
                    Q 50 140, 100 150
                    Q 50 140, 200 250
                    T 200 150
                    T 300 150
                    T 400 150
                    T 500 150
                    T 600 150
                    T 700 150
                    T 800 150
                    V 200 H 0 Z
                "
                                fill="black"
                        />
                    </mask>

                    <!-- Cercle utilisant le masque -->
                    <circle cx="100" cy="100" r="90" class="circle-wave" mask="url(#wave-mask)" />
                </svg>
            </div>

            <!-- Deuxième cercle : Température -->
            <div class="sun" id="sun">
                <div class="sun-text" id="temp-text">{{ room.idAS.temperature }}°C</div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
                <div class="ray"></div>
            </div>


            <div class="cloud-container">
                <img id="cloud" src="{{ asset('images/Nuage.png') }}" alt="Nuage Vert">
            </div>

        </div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const humidity = parseFloat('{{ room.idAS.humidity }}'); // Récupérer l'humidité
                const wave = document.querySelector('.wave');

                if (!isNaN(humidity)) {
                    let height;

                    // Calcul de la hauteur de la vague en fonction de l'humidité
                    if (humidity <= 10) {
                        height = humidity * 3.5; // Très bas
                    } else if (humidity > 10 && humidity <= 30) {
                        height = humidity * 2.7; // Un peu plus haut
                    } else if (humidity > 30 && humidity < 50) {
                        height = humidity * 2.2; // Plus haute
                    } else {
                        height = humidity * 2; // Presque au sommet
                    }

                    // Limiter la hauteur à ne pas dépasser 200 (hauteur maximale du cercle)
                    height = Math.min(200, Math.max(0, height));

                    // Chemin pour une vague longue (800px)
                    const wavePath = `
                M 0 ${height}
                Q 50 ${height - 10}, 100 ${height}
                T 200 ${height}
                T 300 ${height}
                T 400 ${height}
                T 500 ${height}
                T 600 ${height}
                T 700 ${height}
                T 800 ${height}
                V 200 H 0 Z
            `;

                    // Appliquer le chemin au SVG
                    wave.setAttribute('d', wavePath);
                }
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const sun = document.getElementById('sun');
                const tempText = document.getElementById('temp-text');
                const rays = document.querySelectorAll('.sun .ray'); // Sélectionner tous les traits
                const temperature = parseFloat('{{ room.idAS.temperature }}'); // Température de la salle

                if (!isNaN(temperature)) {
                    let color;

                    // Déterminer la couleur en fonction de la température
                    switch (true) {
                        case (temperature < 0):
                            color = "darkblue";
                            break;
                        case (temperature >= 0 && temperature <= 5):
                            color = "blue";
                            break;
                        case (temperature > 5 && temperature <= 15):
                            color = "#edc11d";
                            break;
                        case (temperature > 15 && temperature <= 25):
                            color = "orange";
                            break;
                        case (temperature > 25 && temperature <= 30):
                            color = "orangered";
                            break;
                        case (temperature > 30):
                            color = "red";
                            break;
                        default:
                            console.log("Température invalide.");
                            break;
                    }

                    // Appliquer la couleur au cercle
                    sun.style.background = color;

                    // Appliquer la couleur aux traits
                    rays.forEach(ray => {
                        ray.style.background = color;
                    });

                    // Afficher la température au centre
                    tempText.textContent = `${temperature}°C`;
                }
            });

            // Gestion du CO₂ (taille du nuage)
            const co2 = parseFloat('{{ room.idAS.CO2 }}');
            const cloud = document.getElementById('cloud');
            if (!isNaN(co2)) {
                const scale = Math.min(Math.max(co2 / 1400, 0.28), 0.8); // Échelle entre 0.5 et 1.5
                cloud.style.transform = `scale(${scale})`;
            }
        </script>
        <h3>Température : {{ room.idAS.temperature }} °C</h3>
        <h3>Humidité : {{ room.idAS.humidity }}%</h3>
        <h3>CO2 : {{ room.idAS.CO2 }} ppm</h3>


    </div>




    <!-- Scripts JavaScript de Bootstrap -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
{% endblock %}